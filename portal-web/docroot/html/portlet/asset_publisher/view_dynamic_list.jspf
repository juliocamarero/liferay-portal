<%--
/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
int end = searchContainer.getEnd();
int start = searchContainer.getStart();

if (!portletName.equals(PortletKeys.RELATED_ASSETS)) {
	assetEntryQuery.setGroupIds(groupIds);
}

assetEntryQuery.setExcludeZeroViewCount(excludeZeroViewCount);
assetEntryQuery.setOrderByCol1(orderByColumn1);
assetEntryQuery.setOrderByCol2(orderByColumn2);
assetEntryQuery.setOrderByType1(orderByType1);
assetEntryQuery.setOrderByType2(orderByType2);

List<AssetEntry> results = new ArrayList<AssetEntry>();
int total = 0;

if (!portletName.equals(PortletKeys.RELATED_ASSETS) || (assetEntryQuery.getLinkedAssetEntryId() > 0)) {
	if (assetVocabularyId > 0) {
		AssetVocabulary assetVocabulary = AssetVocabularyLocalServiceUtil.getVocabulary(assetVocabularyId);

		List<AssetCategory> assetCategories = AssetCategoryLocalServiceUtil.getVocabularyRootCategories(assetVocabulary.getVocabularyId(), QueryUtil.ALL_POS, QueryUtil.ALL_POS, null);

		assetEntryQuery.setClassNameIds(classNameIds);

		for (AssetCategory assetCategory : assetCategories) {
			assetCategory = assetCategory.toEscapedModel();

			long[] assetCategoryIds = ArrayUtil.append(assetEntryQuery.getAnyCategoryIds(), assetCategory.getCategoryId());

			assetEntryQuery.setAnyCategoryIds(assetCategoryIds);
		}

		if (PropsValues.ASSET_PUBLISHER_SEARCH_WITH_INDEX && (assetEntryQuery.getLinkedAssetEntryId() == 0)) {
			Hits hits = AssetUtil.search(request, assetEntryQuery, start, end);

			total = hits.getLength();

			searchContainer.setTotal(total);

			results = AssetUtil.getAssetEntries(hits);
		}
		else {
			total = AssetEntryServiceUtil.getEntriesCount(assetEntryQuery);

			searchContainer.setTotal(total);

			results = AssetEntryServiceUtil.getEntries(assetEntryQuery);
		}

		if (!results.isEmpty()) {
			searchContainer.setResults(results);

			request.setAttribute("view.jsp-results", results);

			String previousLabel = StringPool.BLANK;
%>

			<%@ include file="/html/portlet/asset_publisher/view_dynamic_list_vocabulary_assets.jspf" %>

<%
		}
	}
	else if (!groupByClass) {
		assetEntryQuery.setClassNameIds(classNameIds);

		if (PropsValues.ASSET_PUBLISHER_SEARCH_WITH_INDEX && (assetEntryQuery.getLinkedAssetEntryId() == 0)) {
			Hits hits = AssetUtil.search(request, assetEntryQuery, start, end);

			total = hits.getLength();

			searchContainer.setTotal(total);

			results = AssetUtil.getAssetEntries(hits);
		}
		else {
			total = AssetEntryServiceUtil.getEntriesCount(assetEntryQuery);

			searchContainer.setTotal(total);

			assetEntryQuery.setEnd(end);
			assetEntryQuery.setStart(start);

			results = AssetEntryServiceUtil.getEntries(assetEntryQuery);
		}

		searchContainer.setResults(results);

		request.setAttribute("view.jsp-results", results);
%>

		<%@ include file="/html/portlet/asset_publisher/view_dynamic_list_all_assets.jspf" %>

<%
	}
	else {
		Map<Long, AssetRendererFactory> groupAssetRendererFactoryMap = new HashMap<Long, AssetRendererFactory>();

		assetEntryQuery.setClassNameIds(classNameIds);

		if (PropsValues.ASSET_PUBLISHER_SEARCH_WITH_INDEX && (assetEntryQuery.getLinkedAssetEntryId() == 0)) {
			Hits hits = AssetUtil.search(request, assetEntryQuery, start, end);

			total = hits.getLength();

			searchContainer.setTotal(total);

			results = AssetUtil.getAssetEntries(hits);
		}
		else {
			total = AssetEntryServiceUtil.getEntriesCount(assetEntryQuery);

			searchContainer.setTotal(total);

			assetEntryQuery.setEnd(end);
			assetEntryQuery.setStart(start);

			results = AssetEntryServiceUtil.getEntries(assetEntryQuery);
		}

		searchContainer.setResults(results);

		request.setAttribute("view.jsp-results", results);

		if (!results.isEmpty()) {
			String previousLabel = StringPool.BLANK;
%>

			<%@ include file="/html/portlet/asset_publisher/view_dynamic_list_class_assets.jspf" %>

<%
		}
	}
}

if ((total == 0) && (portletDisplayDDMTemplateId == 0)) {
	if (!showPortletWithNoResults && ((addPortletURLs == null) || addPortletURLs.isEmpty()) && !((assetCategoryId > 0) || Validator.isNotNull(assetTagName))) {
		renderRequest.setAttribute(WebKeys.PORTLET_CONFIGURATOR_VISIBILITY, Boolean.TRUE);
	}
%>

	<div class="alert alert-info">
		<c:choose>
			<c:when test="<%= !portletName.equals(PortletKeys.RELATED_ASSETS) %>">
				<liferay-ui:message key="there-are-no-results" />
			</c:when>
			<c:otherwise>
				<liferay-ui:message key="there-are-no-related-assets" />
			</c:otherwise>
		</c:choose>
	</div>

<%
}
%>