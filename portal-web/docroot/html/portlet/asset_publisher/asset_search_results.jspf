<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
if (PropsValues.ASSET_BROWSER_SEARCH_JOURNAL_ARTICLES_WITH_DATABASE && (assetRendererFactory.getClassNameId() == PortalUtil.getClassNameId(JournalArticle.class))) {
	AssetPublisherDisplayContext assetPublisherDisplayContext = new AssetPublisherDisplayContext(request, portletPreferences);

	AssetEntryQuery assetEntryQuery = assetPublisherDisplayContext.getAssetEntryQuery();

	if (searchTerms.isAdvancedSearch()) {
		assetEntryQuery.setAndOperator(searchTerms.isAndOperator());
		assetEntryQuery.setDescription(searchTerms.getDescription());
		assetEntryQuery.setTitle(searchTerms.getTitle());
		assetEntryQuery.setUserName(searchTerms.getUserName());
	}
	else {
		assetEntryQuery.setKeywords(searchTerms.getKeywords());
	}

	assetEntryQuery.setClassNameIds(new long[] {assetRendererFactory.getClassNameId()});
	assetEntryQuery.setGroupIds(groupIds);
	assetEntryQuery.setOrderByCol1("modifiedDate");
	assetEntryQuery.setOrderByCol2("title");
	assetEntryQuery.setOrderByType1("DESC");
	assetEntryQuery.setOrderByType2("ASC");

	int assetTotal = AssetEntryLocalServiceUtil.getEntriesCount(assetEntryQuery);

	assetEntryQuery.setEnd(searchContainer.getEnd());
	assetEntryQuery.setStart(searchContainer.getStart());

	List<AssetEntry> assetEntries = AssetEntryLocalServiceUtil.getEntries(assetEntryQuery);

	searchContainer.setResults(assetEntries);
	searchContainer.setTotal(assetTotal);
}
else {
	Hits hits = null;

	if (searchTerms.isAdvancedSearch()) {
		hits = AssetEntryLocalServiceUtil.search(themeDisplay.getCompanyId(), new long[] {searchTerms.getGroupId()}, themeDisplay.getUserId(), assetRendererFactory.getClassName(), subtypeSelectionId, searchTerms.getUserName(), searchTerms.getTitle(), searchTerms.getDescription(), null, null, WorkflowConstants.STATUS_APPROVED, searchTerms.isAndOperator(), searchContainer.getStart(), searchContainer.getEnd());
	}
	else {
		hits = AssetEntryLocalServiceUtil.search(themeDisplay.getCompanyId(), groupIds, themeDisplay.getUserId(), assetRendererFactory.getClassName(), subtypeSelectionId, searchTerms.getKeywords(), WorkflowConstants.STATUS_APPROVED, searchContainer.getStart(), searchContainer.getEnd());
	}

	List<AssetEntry> assetEntries = AssetUtil.getAssetEntries(hits);

	searchContainer.setResults(assetEntries);
	searchContainer.setTotal(hits.getLength());
}
%>