/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portlet.asset.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.asset.model.AssetBookmark;
import com.liferay.portlet.asset.model.AssetBookmarkModel;
import com.liferay.portlet.asset.model.AssetBookmarkSoap;
import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AssetBookmark service. Represents a row in the &quot;AssetBookmark&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.portlet.asset.model.AssetBookmarkModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AssetBookmarkImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AssetBookmarkImpl
 * @see com.liferay.portlet.asset.model.AssetBookmark
 * @see com.liferay.portlet.asset.model.AssetBookmarkModel
 * @generated
 */
@JSON(strict = true)
public class AssetBookmarkModelImpl extends BaseModelImpl<AssetBookmark>
	implements AssetBookmarkModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a asset bookmark model instance should use the {@link com.liferay.portlet.asset.model.AssetBookmark} interface instead.
	 */
	public static final String TABLE_NAME = "AssetBookmark";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "bookmarkId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "classNameId", Types.BIGINT },
			{ "classPK", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table AssetBookmark (uuid_ VARCHAR(75) null,bookmarkId LONG not null primary key,userId LONG,classNameId LONG,classPK LONG)";
	public static final String TABLE_SQL_DROP = "drop table AssetBookmark";
	public static final String ORDER_BY_JPQL = " ORDER BY assetBookmark.bookmarkId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY AssetBookmark.bookmarkId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.liferay.portlet.asset.model.AssetBookmark"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.liferay.portlet.asset.model.AssetBookmark"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.liferay.portlet.asset.model.AssetBookmark"),
			true);
	public static long CLASSNAMEID_COLUMN_BITMASK = 1L;
	public static long CLASSPK_COLUMN_BITMASK = 2L;
	public static long USERID_COLUMN_BITMASK = 4L;
	public static long UUID_COLUMN_BITMASK = 8L;
	public static long BOOKMARKID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AssetBookmark toModel(AssetBookmarkSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AssetBookmark model = new AssetBookmarkImpl();

		model.setUuid(soapModel.getUuid());
		model.setBookmarkId(soapModel.getBookmarkId());
		model.setUserId(soapModel.getUserId());
		model.setClassNameId(soapModel.getClassNameId());
		model.setClassPK(soapModel.getClassPK());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AssetBookmark> toModels(AssetBookmarkSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AssetBookmark> models = new ArrayList<AssetBookmark>(soapModels.length);

		for (AssetBookmarkSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.portal.util.PropsUtil.get(
				"lock.expiration.time.com.liferay.portlet.asset.model.AssetBookmark"));

	public AssetBookmarkModelImpl() {
	}

	public long getPrimaryKey() {
		return _bookmarkId;
	}

	public void setPrimaryKey(long primaryKey) {
		setBookmarkId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_bookmarkId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return AssetBookmark.class;
	}

	public String getModelClassName() {
		return AssetBookmark.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("bookmarkId", getBookmarkId());
		attributes.put("userId", getUserId());
		attributes.put("classNameId", getClassNameId());
		attributes.put("classPK", getClassPK());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long bookmarkId = (Long)attributes.get("bookmarkId");

		if (bookmarkId != null) {
			setBookmarkId(bookmarkId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long classNameId = (Long)attributes.get("classNameId");

		if (classNameId != null) {
			setClassNameId(classNameId);
		}

		Long classPK = (Long)attributes.get("classPK");

		if (classPK != null) {
			setClassPK(classPK);
		}
	}

	@JSON
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	public long getBookmarkId() {
		return _bookmarkId;
	}

	public void setBookmarkId(long bookmarkId) {
		_bookmarkId = bookmarkId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	public String getClassName() {
		if (getClassNameId() <= 0) {
			return StringPool.BLANK;
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@JSON
	public long getClassNameId() {
		return _classNameId;
	}

	public void setClassNameId(long classNameId) {
		_columnBitmask |= CLASSNAMEID_COLUMN_BITMASK;

		if (!_setOriginalClassNameId) {
			_setOriginalClassNameId = true;

			_originalClassNameId = _classNameId;
		}

		_classNameId = classNameId;
	}

	public long getOriginalClassNameId() {
		return _originalClassNameId;
	}

	@JSON
	public long getClassPK() {
		return _classPK;
	}

	public void setClassPK(long classPK) {
		_columnBitmask |= CLASSPK_COLUMN_BITMASK;

		if (!_setOriginalClassPK) {
			_setOriginalClassPK = true;

			_originalClassPK = _classPK;
		}

		_classPK = classPK;
	}

	public long getOriginalClassPK() {
		return _originalClassPK;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AssetBookmark.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AssetBookmark toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AssetBookmark)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AssetBookmarkImpl assetBookmarkImpl = new AssetBookmarkImpl();

		assetBookmarkImpl.setUuid(getUuid());
		assetBookmarkImpl.setBookmarkId(getBookmarkId());
		assetBookmarkImpl.setUserId(getUserId());
		assetBookmarkImpl.setClassNameId(getClassNameId());
		assetBookmarkImpl.setClassPK(getClassPK());

		assetBookmarkImpl.resetOriginalValues();

		return assetBookmarkImpl;
	}

	public int compareTo(AssetBookmark assetBookmark) {
		long primaryKey = assetBookmark.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		AssetBookmark assetBookmark = null;

		try {
			assetBookmark = (AssetBookmark)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = assetBookmark.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AssetBookmarkModelImpl assetBookmarkModelImpl = this;

		assetBookmarkModelImpl._originalUuid = assetBookmarkModelImpl._uuid;

		assetBookmarkModelImpl._originalUserId = assetBookmarkModelImpl._userId;

		assetBookmarkModelImpl._setOriginalUserId = false;

		assetBookmarkModelImpl._originalClassNameId = assetBookmarkModelImpl._classNameId;

		assetBookmarkModelImpl._setOriginalClassNameId = false;

		assetBookmarkModelImpl._originalClassPK = assetBookmarkModelImpl._classPK;

		assetBookmarkModelImpl._setOriginalClassPK = false;

		assetBookmarkModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AssetBookmark> toCacheModel() {
		AssetBookmarkCacheModel assetBookmarkCacheModel = new AssetBookmarkCacheModel();

		assetBookmarkCacheModel.uuid = getUuid();

		String uuid = assetBookmarkCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			assetBookmarkCacheModel.uuid = null;
		}

		assetBookmarkCacheModel.bookmarkId = getBookmarkId();

		assetBookmarkCacheModel.userId = getUserId();

		assetBookmarkCacheModel.classNameId = getClassNameId();

		assetBookmarkCacheModel.classPK = getClassPK();

		return assetBookmarkCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", bookmarkId=");
		sb.append(getBookmarkId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", classNameId=");
		sb.append(getClassNameId());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.liferay.portlet.asset.model.AssetBookmark");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bookmarkId</column-name><column-value><![CDATA[");
		sb.append(getBookmarkId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classNameId</column-name><column-value><![CDATA[");
		sb.append(getClassNameId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AssetBookmark.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			AssetBookmark.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _bookmarkId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _classNameId;
	private long _originalClassNameId;
	private boolean _setOriginalClassNameId;
	private long _classPK;
	private long _originalClassPK;
	private boolean _setOriginalClassPK;
	private long _columnBitmask;
	private AssetBookmark _escapedModel;
}